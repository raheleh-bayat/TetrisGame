class Shape {
  getDimensions() {
    return this.dimensions;
  }
  move() {
    this.dimensions[0][0] += 1;
    this.dimensions[1][0] += 1;
    this.dimensions[2][0] += 1;
    this.dimensions[3][0] += 1;
  }

  rotate() {
    let a = [this.dimensions[0], this.dimensions[1]];
    let b = [this.dimensions[2], this.dimensions[3]];

    this.dimensions = this.mergeMatrices(this.rotateMatrix(a), this.rotateMatrix(b));
  }

  mergeMatrices(matrix1, matrix2) {
    const mergedMatrix = [];

    // Concatenate rows of matrix1
    for (let i = 0; i < matrix1.length; i++) {
      mergedMatrix.push(matrix1[i]);
    }

    // Concatenate rows of matrix2
    for (let i = 0; i < matrix2.length; i++) {
      mergedMatrix.push(matrix2[i]);
    }

    return mergedMatrix;
  }

  rotateMatrix(matrix) {
    const n = matrix.length;

    // Step 1: Swap corners
    for (let i = 0; i < n / 2; i++) {
      for (let j = i; j < n - i - 1; j++) {
        const temp = matrix[i][j];
        matrix[i][j] = matrix[n - 1 - j][i];
        matrix[n - 1 - j][i] = matrix[n - 1 - i][n - 1 - j];
        matrix[n - 1 - i][n - 1 - j] = matrix[j][n - 1 - i];
        matrix[j][n - 1 - i] = temp;
      }
    }

    return matrix;
  }
}

class Z extends Shape {
  constructor() {
    super();
    this.dimensions = [
      [0, 4],
      [0, 5],
      [1, 5],
      [1, 6],
    ];
  }
}

class L extends Shape {
  constructor() {
    super();
    this.dimensions = [
      [0, 4],
      [0, 5],
      [0, 6],
      [1, 6],
    ];
  }
}

class B extends Shape {
  constructor() {
    super();
    this.dimensions = [
      [0, 4],
      [0, 5],
      [1, 4],
      [1, 5],
    ];
  }
}

class I extends Shape {
  constructor() {
    super();
    this.dimensions = [
      [0, 3],
      [0, 4],
      [0, 5],
      [0, 6],
    ];
  }
}
